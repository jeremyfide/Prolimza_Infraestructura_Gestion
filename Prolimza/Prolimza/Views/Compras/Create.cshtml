@model Prolimza.Models.CompraCreateViewModel

@{
    ViewData["Title"] = "Crear Compra";
    ViewData["subTitle"] = "Formulario para crear compras desde la perspectiva de administrador.";
}

<div class="geex-content__section geex-content__form">
    <div class="geex-content__form__wrapper">
        <form asp-action="Create" class="form-container">
            <div asp-validation-summary="ModelOnly" class="text-danger text-center mb-3"></div>

            <div class="geex-content__form__single__box mb-20">
              
                <input asp-for="Compra.CodigoIngreso" class="form-control-custom" placeholder="Código Ingreso" required />
                <span asp-validation-for="Compra.CodigoIngreso" class="text-danger"></span>
                
            </div>

            <h4>Productos</h4>
            <div id="productos-container"></div>
            <div class="geex-content__form__single d-flex gap-10 justify-content-center">
                <button type="button" id="agregar-producto" class="geex-btn geex-btn--primary-transparent"><i class="uil-plus"></i>Agregar producto</button>
            </div>

            <h4>Materias Primas</h4>
            <div id="materiasprimas-container"></div>
            <div class="geex-content__form__single d-flex gap-10 justify-content-center">
                <button type="button" id="agregar-mp" class="geex-btn geex-btn--primary-transparent"><i class="uil-plus"></i>Agregar materia prima</button>
            </div>

            <div class="geex-content__form__single d-flex gap-10 justify-content-center mt-4">
                <button type="submit" class="geex-btn geex-btn--primary-transparent">
                    <i class="uil-plus"></i> Guardar
                </button>
                <a asp-action="Index" class="geex-btn geex-btn--dark-transparent">Volver a la lista</a>
            </div>
        </form>
    </div>
</div>

<!-- Templates ocultos -->
<div id="template-producto" class="d-none">
    <div class="producto-item d-flex gap-2 mb-2 align-items-center geex-content__form__single__box d-flex gap-20">
        <select class="form-control">
            @foreach (var p in Model.ListaProductos)
            {
                <option value="@p.Value">@p.Text</option>
            }
        </select>
        <input type="number" class="form-control" placeholder="Cantidad" min="0" />
        <button type="button" class="btn btn-danger btn-sm">❌</button>
    </div>
</div>

<div id="template-mp" class="d-none">
    <div class="mp-item d-flex gap-2 mb-2 align-items-center geex-content__form__single__box d-flex gap-20">
        <select class="form-control">
            @foreach (var mp in Model.ListaMateriasPrimas)
            {
                <option value="@mp.Value">@mp.Text</option>
            }
        </select>
        <input type="number" class="form-control" placeholder="Cantidad" min="0" />
        <button type="button" class="btn btn-danger btn-sm">❌</button>
    </div>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <script>
        let contadorProducto = 0;
        let contadorMP = 0;

        function crearLinea(templateId, containerId, prefix, contador) {
            const template = document.querySelector(templateId).firstElementChild.cloneNode(true);
            const selects = template.querySelectorAll("select");
            const inputs = template.querySelectorAll("input");

            selects.forEach(select => {
                select.name = `${prefix}[${contador}].${prefix === 'Productos' ? 'IdProducto' : 'IdMateriaPrima'}`;
            });

            inputs.forEach(input => {
                input.name = `${prefix}[${contador}].Cantidad`;
            });

            document.querySelector(containerId).appendChild(template);
        }

        document.getElementById("agregar-producto").addEventListener("click", () => {
            crearLinea("#template-producto", "#productos-container", "Productos", contadorProducto);
            contadorProducto++;
        });

        document.getElementById("agregar-mp").addEventListener("click", () => {
            crearLinea("#template-mp", "#materiasprimas-container", "MateriasPrimas", contadorMP);
            contadorMP++;
        });

        // Eliminar línea
        document.addEventListener("click", function (e) {
            if (e.target.classList.contains("btn-danger")) {
                const item = e.target.closest(".producto-item") || e.target.closest(".mp-item");
                item?.remove();
            }
        });

        // Validación antes de enviar
        document.querySelector("form").addEventListener("submit", function (e) {
            const productos = [...document.querySelectorAll('[name^="Productos"][name$=".Cantidad"]')];
            const materias = [...document.querySelectorAll('[name^="MateriasPrimas"][name$=".Cantidad"]')];

            const hayProductos = productos.some(p => parseInt(p.value || 0) > 0);
            const hayMaterias = materias.some(mp => parseInt(mp.value || 0) > 0);

            if (!hayProductos && !hayMaterias) {
                alert("Debe agregar al menos un producto o una materia prima con cantidad mayor a 0.");
                e.preventDefault();
            }
        });
    </script>
}
